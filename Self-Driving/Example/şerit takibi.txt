from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import cv2
import numpy as np
import math
import RPi.GPIO as GPIO
largestLeftLineSize = 0
largestRightLineSize = 0
largestLeftLine = (0,0,0,0)
largestRightLine = (0,0,0,0)
def main():
    #kamerayý baþlat 
    camera=PiCamera()
    camera.resolution=(320,240)
    camera.framerate=32
    rawCapture=PiRGBArray(camera,size=(320,240))
    
 
    #kamera için bekleme
    time.sleep(0.1)
 
    for frame in camera.capture_continuous(rawCapture,format="bgr",use_video_port=True):
        frame=frame.array
        cv2.imshow("Kamera ilk Görüntü",frame)
        imgGrayscale=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
        cv2.imshow("Siyah- Beyaz dönüþüm",imgGrayscale)
        imgBlurred = cv2.GaussianBlur(imgGrayscale,(5,5),0)
        cv2.imshow("Gauss Filtresi",imgBlurred)
        imgCanny=cv2.Canny(imgBlurred,0,255)
        cv2.imshow("Canny Kenar Bulma",imgCanny)
        mask = np.zeros_like(imgCanny)
        vertices =np.array([[(15,240),(95,140),(225,140),(305,240)]],np.int32)
        cv2.fillPoly(mask, vertices, 255)
        cv2.imshow("Ýstenilen Alan",mask)
        masked = cv2.bitwise_and(imgCanny, mask)
        cv2.imshow("Ýstenilen Alan Çizgileri",masked)
        lines = cv2.HoughLinesP(masked,1,np.pi/180,10,maxLineGap=150)
        
        
        #þerit için sabit deðerler
        sag=0
        sol=0
        radius_sag=0
        radius_sol=0
        if lines is not None:
            for line in lines:
                x1, y1, x2, y2 = line[0]
                #cv2.line(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
        
                size = math.hypot(x2 - x1, y2 - y1)
                slope = ((y2-y1)/(x2-x1))
                if (slope > 1): #sag
                    sag=1
                    radius=math.sqrt(((y2-y1)*(y2-y1))+((x2-x1)*(x2-x1)))
                    radius_sag=radius
                    if (size > largestRightLineSize):
                        largestRightLine = (x1, y1, x2, y2)                    
                    cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                if (slope < -1): #sol
                    sol=1
                    radius=math.sqrt(((y2-y1)*(y2-y1))+((x2-x1)*(x2-x1)))
                    radius_sol=radius
                    if (size > largestLeftLineSize):
                        largestLeftLine = (x1, y1, x2, y2)
                    cv2.line(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)          
                if (sag==1) & (sol==1) & (radius_sag>40) & (radius_sol>40):
                    print('Þerit takip Araç düz gidiyor...')
                if (sag==1) & (sol==0) & (radius_sag>40):
                    print('Þerit takip Araç sola gider<<<<<<<====')
                if (sag==0) & (sol==1) & (radius_sol>40):
                    print('Þerit takip Araç saða gider====>>>>>>>')
        
                       
        if lines is None:
            print('Þerit kontrol Þerit algýlanmadý...')
        
        cv2.imshow("Ekran",frame)
        key=cv2.waitKey(1)&0xFF
 
        rawCapture.truncate(0) # birsonraki frame için rawCapture temizliyoruz.
 
        if key == ord("q"): # klavyeden q tuþuna basýlýrsa döngüyü sonlandýr.
            return
 
if __name__ == "__main__":
        main()
    
